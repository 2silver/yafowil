Preparation
===========

    >>> import yafowil.standard
    >>> from yafowil.base import factory, RuntimeData
    
Test Rendering of Compound
==========================

    >>> import yafowil.compound
    >>> compound = factory('compound', 
    ...                    'COMPOUND', 
    ...                    {'inner': 'somevalue', 
    ...                     'inner2': 'othervalue'})
    >>> compound['inner'] = factory('text', 'inner', 'value1')
    >>> compound['inner2'] = factory('text', 'inner2', 'value2')
    >>> compound()
    u'<input id="input-COMPOUND-inner" name="COMPOUND.inner" type="text" 
    value="value1" /><input id="input-COMPOUND-inner2" name="COMPOUND.inner2" 
    type="text" value="value2" />'
    
Same with delegation switched on:

    >>> compound = factory('compound', 
    ...                    'COMPOUND', 
    ...                    {'inner': 'somevalue', 
    ...                     'inner2': 'othervalue'},
    ...                    {'delegation': True})
    >>> compound['inner'] = factory('text', 'inner', 'value')
    >>> compound['inner2'] = factory('text', 'inner2', 'value')
    >>> compound()
    u'<input id="input-COMPOUND-inner" name="COMPOUND.inner" type="text" 
    value="somevalue" /><input id="input-COMPOUND-inner2" name="COMPOUND.inner2" 
    type="text" value="othervalue" />'

Test Extraction of Widget
=========================

    >>> compound.extract({'COMPOUND.inner': 'newvalue'})
    {'errors': [], 'extracted': [{'inner2': {'errors': [], 
    'extracted': [<UNSET>, <UNSET>], 'input_field_type': 'text', 'rendered': [], 
    'request': {'COMPOUND.inner': 'newvalue'}, 'value': 'othervalue'}, 
    'inner': {'errors': [], 'extracted': ['newvalue', 'newvalue'], 
    'input_field_type': 'text', 'rendered': [], 'request': {'COMPOUND.inner': 'newvalue'}, 
    'value': 'somevalue'}}], 'rendered': [], 'request': {'COMPOUND.inner': 'newvalue'}, 
    'value': {'inner2': 'othervalue', 'inner': 'somevalue'}}

Test Fieldset
=============
::

    >>> compound = factory('fieldset', 
    ...                    'COMPOUND', {'inner': 'somevalue', 
    ...                                 'inner2': 'othervalue'},
    ...                    {'widgets': [widget, widget2]})
    >>> compound()
    u'<fieldset id="fieldset-COMPOUND"><input id="input-COMPOUND-inner" 
    name="COMPOUND.inner" type="text" value="value" /><input 
    id="input-COMPOUND-inner2" name="COMPOUND.inner2" type="text" 
    value="value2" /></fieldset>'
    
Test Form
=========
::

    >>> compound = factory('form', 
    ...                    'FORM', None,
    ...                    {'widgets': [widget, widget2],
    ...                     'action': 'http://localhost/test'})
    >>> compound.extract({})
    {'errors': [], 'extracted': [{'inner2': {'errors': [], 'extracted': 
    [<UNSET>, <UNSET>], 'input_field_type': 'text', 'rendered': [], 'request': {}, 
    'value': 'value2'}, 'inner': {'errors': [], 'extracted': [<UNSET>, <UNSET>], 
    'input_field_type': 'text', 'rendered': [], 'request': {}, 'value': 'value'}}], 
    'rendered': [], 'request': {}, 'value': None, 
    'widgets': [<yafowil.base.Widget object at ...>, <yafowil.base.Widget object at ...>]}    
    
    >>> data = compound.extract({'FORM.widget':'value'})    
    >>> compound()
    u'<form action="http://localhost/test" id="form-FORM"><input id="input-FORM-inner" 
    name="FORM.inner" type="text" value="value" /><input id="input-FORM-inner2" 
    name="FORM.inner2" type="text" value="value2" /></form>'    

Test Array
==========

First the Iterator.
::

    >>> from yafowil.compound import ArrayWidgetFactory
    >>> data = RuntimeData()
    >>> data['value'] = None
    >>> data['request'] = {}
    >>> arrayfactory = ArrayWidgetFactory('base', data, {'widget': widget})
    >>> [_.uname for _ in arrayfactory]
    ['inner-0000000']

    >>> arrayfactory = ArrayWidgetFactory('base', data, {'widget': widget, 'min': 0})
    >>> [_.uname for _ in arrayfactory]
    []

    >>> arrayfactory = ArrayWidgetFactory('base', data, {'widget': widget, 'min': 3})
    >>> [_.uname for _ in arrayfactory]
    ['inner-0000000', 'inner-0000001', 'inner-0000002']
    
    >>> arrayfactory = ArrayWidgetFactory('base', data, {'widget': widget})
    >>> data['extracted'].append(['foo', 'bar'])
    >>> [_.uname for _ in arrayfactory]
    ['inner-0000000', 'inner-0000001']

    >>> arrayfactory = ArrayWidgetFactory('base', data, {'widget': widget})
    >>> data['extracted'] = []
    >>> data['value'] = ['foo', 'bar']
    >>> [_.uname for _ in arrayfactory]
    ['inner-0000000', 'inner-0000001']

    >>> arrayfactory = ArrayWidgetFactory('base', data, {'widget': widget})
    >>> data['extracted'] = []
    >>> data['request'] = {'base.inner-0000000': 'one', 
    ...                    'base.inner-0000001': 'two'}
    >>> data['value'] = []
    >>> [_.uname for _ in arrayfactory]
    ['inner-0000000', 'inner-0000001']

    
Then the array via factory.
::    
    
    >>> awidget = factory('array', 'ARRAY', [], {'widget': widget})
    >>> data = awidget.extract({})
    >>> data
    {'errors': [], 'extracted': [{'inner-0000000': {'errors': [], 'extracted': 
    [<UNSET>, <UNSET>], 'input_field_type': 'text', 'rendered': [], 'request': {}, 
    'value': 'value'}}, [{'errors': [], 'extracted': [<UNSET>, <UNSET>], 
    'input_field_type': 'text', 'rendered': [], 'request': {}, 'value': 'value'}]], 
    'rendered': [], 'request': {}, 'value': {'inner-0000000': {}}, 'widgets': 
    [<yafowil.base.Widget object at ...>]}
    
    >>> awidget(data=data)
    u'<input id="input-ARRAY-inner-0000000" name="ARRAY.inner-0000000" 
    type="text" value="value" />'

When we get additional data from request, we want it extracted.
::

    >>> data = awidget.extract({'ARRAY.inner-0000000': 'one',
    ...                        'ARRAY.inner-0000001': 'two'})
    >>> [_['extracted'] for _ in data.last_extracted]
    [['one', 'one'], ['two', 'two']]
    
    >>> awidget(data=data)
    u'<input id="input-ARRAY-inner-0000000" name="ARRAY.inner-0000000" type="text" 
    value="one" /><input id="input-ARRAY-inner-0000001" name="ARRAY.inner-0000001" 
    type="text" value="two" />'

Render additional.
::        

    >>> awidget = factory('array', 'ADD', [], {'widget': widget, 
    ...                                         'additional': 2})
    >>> awidget()
    u'<input id="input-ADD-inner-0000000" name="ADD.inner-0000000" type="text" 
    value="value" /><input id="input-ADD-inner-0000001" name="ADD.inner-0000001" 
    type="text" value="value" />'   
    