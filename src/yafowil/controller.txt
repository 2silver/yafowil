Required imports
::

    >>> import yafowil.common
    >>> import yafowil.compound
    >>> from yafowil.base import factory
    >>> from yafowil.controller import Controller

Dummy context
::

    >>> class Context(object):
    ...     value = 'hello world'    
    >>> context = Context()

Dummy getter
::

    >>> def getter(widget, data):
    ...     return data['request'].context.value

Create Widget tree
::
 
    >>> form = factory(u'form',
    ...                name='testform',
    ...                props={'action': 'http://fubar.com'})
    >>> form['field1'] = factory('text',
    ...                          value=getter)
    >>> form['field2'] = factory('text',
    ...                          value='',
    ...                          props={'required': True})

Define action ``handler``
::

    >>> def handler(widget, data):
    ...     print 'handler called "%s"' % '.'.join(widget.path)

Define action ``next``
::

    >>> def next(request):
    ...     return 'next return value'

Indicate widget to be an ``action`` definition by setting ``action`` attribute
to widget properties. ``expression``, ``handler`` and ``next`` are action
referring properties.
::
    
    >>> props = {
    ...     'action': 'save',
    ...     'expression': True,
    ...     'handler': handler,
    ...     'next': next,
    ...     'label': 'Save',
    ... }

Add save action.
::

    >>> form['save'] = factory('submit', props=props)

Check widget tree
::

    >>> form.printtree()
    <class 'yafowil.base.Widget'>: testform
      <class 'yafowil.base.Widget'>: field1
      <class 'yafowil.base.Widget'>: field2
      <class 'yafowil.base.Widget'>: save

Dummy request
::
  
    >>> class Request(dict):
    ...     context = context
    >>> request = Request()

Render form with empty request
::

    >>> form(request)
    u'<form action="http://fubar.com" enctype="multipart/form-data" 
    id="form-testform" method="post"><input id="input-testform-field1" 
    name="testform.field1" type="text" value="hello world" /><input 
    class="required" id="input-testform-field2" name="testform.field2" 
    type="text" value="" /><input id="input-testform-save" 
    name="action.testform.save" type="submit" value="Save" /></form>'    

Create controller for form.
::

    >>> controller = Controller(form, request)
    
If action is not triggered, or ``action['next']`` is not set,
``Controller.next`` is ``None``.
::
    
    >>> controller.next
    
Since validation failed due to missing required field, ``error`` is True
::

    >>> controller.error
    True

Provide required field
::

    >>> request['testform.field2'] = '1'
    >>> controller = Controller(form, request)
    >>> controller.error
    False

Trigger save action without required field
::

    >>> del request['testform.field2']
    >>> request['action.testform.save'] = '1'
    >>> controller = Controller(form, request)
    >>> controller.error
    True

Trigger action with valid input
::

    >>> request['testform.field2'] = '1'
    >>> controller = Controller(form, request)
    handler called "testform"
    
    >>> controller.next
    'next return value'
    
    >>> controller.error
    False
    
Render the form
::
    >>> controller.rendered
    u'<form action="http://fubar.com" enctype="multipart/form-data" 
    id="form-testform" method="post"><input id="input-testform-field1" 
    name="testform.field1" type="text" value="hello world" /><input 
    class="required" id="input-testform-field2" name="testform.field2" 
    type="text" value="1" /><input id="input-testform-save" 
    name="action.testform.save" type="submit" value="Save" /></form>'
