Required imports
::

    >>> import yafowil.common
    >>> import yafowil.compound
    >>> from yafowil.base import factory
    >>> from yafowil.controller import Controller

Create a widget tree
::

    >>> class Context(object):
    ...     value = 'hello world'    
    
    >>> context = Context()
    
    XXX: need widget as well in getter for generic getters mapping to fieldnames
    >>> def getter(request):
    ...     return request.context.value
    
    >>> form = factory(u'form',
    ...                name='testform',
    ...                properties={'action': 'http://fubar.com'})
    >>> form['field1'] = factory('text',
    ...                          value_or_getter=getter)
    >>> form['field2'] = factory('text',
    ...                          value_or_getter='',
    ...                          properties={'required': True})
    
    >>> def handler(request, widget):
    ...     print request
    
    >>> def next(request):
    ...     return 'next return value'
    
    >>> props = {
    ...     'action': 'save',
    ...     'expression': True,
    ...     'handler': handler,
    ...     'next': next,
    ...     'label': 'Save',
    ... }
    
    >>> form['save'] = factory('submit',
    ...                        properties={
    ...                            'action': 'save',
    ...                            'expression': True,
    ...                            'handler': handler,
    ...                            'next': next,
    ...                            'label': 'Save',
    ...                        })
    >>> form.printtree()
    <class 'yafowil.base.Widget'>: testform
      <class 'yafowil.base.Widget'>: field1
      <class 'yafowil.base.Widget'>: field2
      <class 'yafowil.base.Widget'>: save
    
    >>> class Request(dict):
    ...     context = context
    
    >>> request = Request()
    
    >>> form(request)
    u'<form action="http://fubar.com" enctype="multipart/form-data" 
    id="form-testform" method="post"><input id="input-testform-field1" 
    name="testform.field1" type="text" value="hello world" /><input 
    class="required" id="input-testform-field2" name="testform.field2" 
    type="text" value="" /><input class="" id="input-testform-save" 
    name="action.testform.save" type="submit" value="Save" /></form>'

Create controller for form.
::

    >>> controller = Controller(form)
    
If action is not triggered, ``__call__`` of controller returns ``None`` and
``Controller.error`` is ``False``.
::
    
    >>> controller(request)
    >>> controller.error
    False

Now trigger our save action. Controller must result in an error, since we have
a requred field.

    >>> request['action.testform.save'] = '1'
    >>> #controller(request)
    XXX: fails - required field not recognized
    