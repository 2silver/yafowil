# -*- coding: utf-8 -*-

Yafowil common widgets
======================

Trigger registry by importing.
::

    >>> import yafowil.common

Helper::
    >>> from yafowil.utils import Tag
    >>> tag = Tag(lambda msg: msg)           


Text Input Widget
-----------------
::

    >>> from yafowil.base import factory
    >>> inputwidget = factory('text', name='MYTEXT', value='Test Text')    
    >>> inputwidget()
    u'<input class="text" id="input-MYTEXT" name="MYTEXT" type="text" value="Test Text" />'

    >>> inputwidget = factory('password', 'MYPASSWORD', '')
    >>> inputwidget()
    u'<input class="password"  id="input-MYPASSWORD" name="MYPASSWORD" type="password" value="" />'

    >>> inputwidget = factory('hidden', 'MYHIDDEN', 'Test Hidden')
    >>> inputwidget()
    u'<input class="hidden" id="input-MYHIDDEN" name="MYHIDDEN" type="hidden" value="Test Hidden" />'


Required Input Widget
---------------------

Render required widget.
::

    >>> inputwidget = factory('text', 'REQUIRED', '',
    ...                       {'required': True,
    ...                        'error_class': True})
    >>> inputwidget()
    u'<input class="required text" id="input-REQUIRED" name="REQUIRED" 
    type="text" value="" />'

Extract with empty request, key not in request therefore no error.
::
    
    >>> data = inputwidget.extract({})
    >>> data
    <RuntimeData REQUIRED, value='', extracted=<UNSET>, 
    attrs={'input_field_type': 'text'} at ...>
        
Extract with empty input sent, required error expected.
::    
    
    >>> data = inputwidget.extract({'REQUIRED': ''})
    >>> data
    <RuntimeData REQUIRED, value='', extracted='', 1 error(s), 
    attrs={'input_field_type': 'text'} at ...>

    >>> data.errors
    [ExtractionError('Mandatory field was empty',)]

With getter value set, empty request, no error expected.
::    
    
    >>> inputwidget = factory('text', 'REQUIRED', 'Test Text',
    ...                       {'required': True,
    ...                        'error_class': True})
    >>> data = inputwidget.extract({})
    >>> data
    <RuntimeData REQUIRED, value='Test Text', extracted=<UNSET>,
    attrs={'input_field_type': 'text'} at ...>

    >>> inputwidget(data=data)
    u'<input class="required text" id="input-REQUIRED" name="REQUIRED" type="text" 
    value="Test Text" />'

With getter value set, request given, error expected.
::    

    >>> data = inputwidget.extract({'REQUIRED': ''})
    >>> data
    <RuntimeData REQUIRED, value='Test Text', extracted='', 1 error(s), 
    attrs={'input_field_type': 'text'} at ...>
    
    >>> inputwidget(data=data)
    u'<input class="error required text" id="input-REQUIRED" name="REQUIRED" 
    type="text" value="" />'

Create a custom error message.
::    

    >>> inputwidget = factory('text', 'REQUIRED', '',
    ...                       {'required': 'You fool, fill in a value!'})
    >>> data = inputwidget.extract({})
    >>> data 
    <RuntimeData REQUIRED, value='', extracted=<UNSET>, 
    attrs={'input_field_type': 'text'} at ...>
    

Checkbox Widget
---------------

A boolean checkbox widget (default).
::
    
    >>> inputwidget = factory('checkbox', 'MYCHECKBOX')    
    >>> inputwidget()
    u'<input id="input-MYCHECKBOX" name="MYCHECKBOX" 
    type="checkbox" value="" /><input id="checkboxexists-MYCHECKBOX" 
    name="MYCHECKBOX-exists" type="hidden" value="checkboxexists" />'

    >>> inputwidget = factory('checkbox', 'MYCHECKBOX', value='True')    
    >>> inputwidget()
    u'<input checked="checked" id="input-MYCHECKBOX" name="MYCHECKBOX" 
    type="checkbox" value="" /><input id="checkboxexists-MYCHECKBOX" 
    name="MYCHECKBOX-exists" type="hidden" value="checkboxexists" />'

A checkbox widget with an value or an empty string.
::

    >>> inputwidget = factory('checkbox', 'MYCHECKBOX', '',
    ...                       props={'format': 'string'})    
    >>> inputwidget()
    u'<input id="input-MYCHECKBOX" name="MYCHECKBOX" 
    type="checkbox" value="" /><input id="checkboxexists-MYCHECKBOX" 
    name="MYCHECKBOX-exists" type="hidden" value="checkboxexists" />'

    >>> inputwidget = factory('checkbox', 'MYCHECKBOX', 'Test Checkbox',
    ...                       props={'format': 'string'})    
    >>> inputwidget()
    u'<input checked="checked" id="input-MYCHECKBOX" name="MYCHECKBOX" 
    type="checkbox" value="Test Checkbox" /><input id="checkboxexists-MYCHECKBOX" 
    name="MYCHECKBOX-exists" type="hidden" value="checkboxexists" />'


Textarea Widget
---------------
::

    >>> inputwidget = factory('textarea', 'MYTEXTAREA', 'Test Textarea',
    ...                       dict(label='Test Textarea Widget',
    ...                            id={'label': 'TestLabelId'}))
    >>> inputwidget()
    u'<textarea cols="80" id="input-MYTEXTAREA" name="MYTEXTAREA" rows="25">Test Textarea</textarea>'


Selection Widget
----------------
::

    >>> selectwidget = factory('select', 'MYSELECT', ['one', 'three'],
    ...                       {'vocabulary': [('one','One'), 
    ...                                       ('two', 'Two'), 
    ...                                       ('three', 'Three'),
    ...                                       ('four', 'Four')],
    ...                       })
    >>> selectwidget()
    u'<select id="input-MYSELECT" name="MYSELECT"><option id="input-MYSELECT-one" 
    selected="selected" value="one">One</option><option id="input-MYSELECT-two" 
    value="two">Two</option><option id="input-MYSELECT-three" selected="selected" 
    value="three">Three</option><option id="input-MYSELECT-four" 
    value="four">Four</option></select>'

    >>> data = selectwidget.extract({'MYSELECT': 'two'})
    >>> selectwidget(data=data)
    u'<select id="input-MYSELECT" name="MYSELECT"><option id="input-MYSELECT-one" 
    value="one">One</option><option id="input-MYSELECT-two" selected="selected" 
    value="two">Two</option><option id="input-MYSELECT-three" 
    value="three">Three</option><option id="input-MYSELECT-four" 
    value="four">Four</option></select>'
    
    >>> selectwidget = factory('select', 'MYSELECT', ['one', 'three'],
    ...                       {'vocabulary': [('one','One'), 
    ...                                       ('two', 'Two'), 
    ...                                       ('three', 'Three'),
    ...                                       ('four', 'Four')],
    ...                        'format': 'single',
    ...                       })
    >>> selectwidget()
    u'<input id="exists-MYSELECT" name="MYSELECT-exists" type="hidden" 
    value="exists" /><div id="radio-MYSELECT-one"><input checked="checked" 
    id="input-MYSELECT-one" name="MYSELECT" type="radio" value="one" 
    /><span>One</span></div><div id="radio-MYSELECT-two"><input 
    id="input-MYSELECT-two" name="MYSELECT" type="radio" value="two" 
    /><span>Two</span></div><div id="radio-MYSELECT-three"><input 
    checked="checked" id="input-MYSELECT-three" name="MYSELECT" type="radio" 
    value="three" /><span>Three</span></div><div id="radio-MYSELECT-four"><input 
    id="input-MYSELECT-four" name="MYSELECT" type="radio" value="four" 
    /><span>Four</span></div>'

    
File Widget
-----------

    >>> widget = factory('file', 'MYFILE')
    >>> widget()
    u'<input id="input-MYFILE" name="MYFILE" type="file" value="" />'
    
    >>> widget = factory('file', 'MYFILE', value='x')
    >>> widget()
    u'<input id="input-MYFILE" name="MYFILE" type="file" value="" /><div 
    id="radio-MYFILE-keep"><input checked="checked" id="input-MYFILE-keep" 
    name="MYFILE-action" type="radio" value="keep" /><span>Keep Existing 
    file</span></div><div id="radio-MYFILE-replace"><input 
    id="input-MYFILE-replace" name="MYFILE-action" type="radio" 
    value="replace" /><span>Replace existing file</span></div><div 
    id="radio-MYFILE-delete"><input id="input-MYFILE-delete" 
    name="MYFILE-action" type="radio" value="delete" /><span>Delete 
    existing file</span></div>'    
    
    >>> request = {
    ...     'MYFILE': 'y',
    ...     'MYFILE-action': 'keep'
    ... }
    >>> data = widget.extract(request)
    >>> data.extracted
    'x'
    
    >>> request['MYFILE-action'] = 'replace'
    >>> data = widget.extract(request)
    >>> data.extracted
    'y'
    
    >>> request['MYFILE-action'] = 'delete'
    >>> data = widget.extract(request)
    >>> data.extracted
    <UNSET>


Submit Widget (action)
----------------------
::

    >>> props = {
    ...     'action': True,
    ...     'label': 'Action name',
    ... }
    >>> widget = factory('submit', name='save', props=props)
    >>> widget()
    u'<input id="input-save" name="action.save" type="submit" value="Action name" />'


Proxy Widget
------------

Used to pass hidden arguments out of form namespace.
::

    >>> widget = factory('proxy', name='proxy', value='1')
    >>> widget()
    u'<input id="input-proxy" name="proxy" type="hidden" value="1" />'


Label Widget
------------

Default.
::

    >>> widget = factory('label:file', name='MYFILE', \
    ...                   props={'label': 'MY FILE'})
    >>> pxml(tag('div', widget()))
    <div>
      <label for="input-MYFILE">MY FILE</label>
      <input id="input-MYFILE" name="MYFILE" type="file" value=""/>
    </div>
    <BLANKLINE>
    
Label after widget.
::

    >>> widget = factory('label:file', name='MYFILE', \
    ...                   props={'label': 'MY FILE',
    ...                          'label.position': 'after'})
    >>> pxml(tag('div', widget()))
    <div>
      <input id="input-MYFILE" name="MYFILE" type="file" value=""/>
      <label for="input-MYFILE">MY FILE</label>
    </div>
    <BLANKLINE>
    
Same with inner label.
::

    >>> widget = factory('label:file', name='MYFILE', \
    ...                   props={'label': 'MY FILE',
    ...                          'label.position': 'inner'})
    >>> pxml(tag('div', widget()))
    <div>
      <label for="input-MYFILE">MY FILE<input id="input-MYFILE" name="MYFILE" type="file" value=""/></label>
    </div>
    <BLANKLINE>    

Field Widget
------------
    
Chained file inside field with label.
::

    >>> widget = factory('field:label:file', name='MYFILE', \
    ...                   props={'label': 'MY FILE'})
    >>> pxml(widget())
    <div class="field" id="field-MYFILE">
      <label for="input-MYFILE">MY FILE</label>
      <input id="input-MYFILE" name="MYFILE" type="file" value=""/>
    </div>
    <BLANKLINE>

Error Widget
------------

Chained password inside error inside field.
::

    >>> widget = factory('field:error:password', name='password',
    ...                  props={'label': 'Password',
    ...                         'required': 'No password given!'})
    
    >>> data = widget.extract({'password': ''}) 
    >>> pxml(widget(data=data))
    <div class="field" id="field-password">
      <div class="error">
        <div class="errormessage">No password given!</div>
        <input class="password required" id="input-password" name="password" type="password" value=""/>
      </div>
    </div>
    <BLANKLINE>
    
    >>> data = widget.extract({'password': 'secret'})
    >>> pxml(widget(data=data))
    <div class="field" id="field-password">
      <input class="password required" id="input-password" name="password" type="password" value="secret"/>
    </div>
    <BLANKLINE>

Password Widget
---------------

Password widget has 2 additional properties, ``minlength`` and ``ascii``.

    >>> widget = factory(
    ...     'password',
    ...     name='password',
    ...     props={
    ...     })
    >>> data = widget.extract({'password': 'xx'})
    >>> data.errors
    []
    
    >>> widget = factory(
    ...     'password',
    ...     name='password',
    ...     props={
    ...         'minlength': 3,
    ...     })
    >>> data = widget.extract({'password': 'xx'})
    >>> data.errors
    [ExtractionError('Input must have at least 3 characters.',)]
    
    >>> data = widget.extract({'password': 'xxx'})
    >>> data.errors
    []
    
    >>> widget = factory(
    ...     'password',
    ...     name='password',
    ...     props={
    ...         'ascii': True,
    ...     })
    >>> data = widget.extract({'password': u'xx'})
    >>> data.errors
    []
    
    >>> data = widget.extract({'password': u'äää'})
    >>> data.errors
    [ExtractionError('Input contains illegal characters.',)]

Email Widget
------------

    >>> widget = factory(
    ...     'email',
    ...     name='email')
    >>> pxml(widget())
    <input class="email" id="input-email" name="email" type="text"/>
    
    >>> data = widget.extract({'email': 'foo@bar.com'})
    >>> data.errors
    []
    
    >>> data = widget.extract({'email': 'foo@bar'})
    >>> data.errors
    [ExtractionError('Input not a valid email address.',)]
    
    >>> data = widget.extract({'email': '@bar.com'})
    >>> data.errors
    [ExtractionError('Input not a valid email address.',)]