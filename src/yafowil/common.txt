Preparation
===========

Trigger registry by importing

    >>> import yafowil.common
        
Text Input Widget
=================
::

    >>> from yafowil.base import factory
    >>> inputwidget = factory('text', name='MYTEXT', value='Test Text')    
    >>> inputwidget()
    u'<input id="input-MYTEXT" name="MYTEXT" type="text" value="Test Text" />'

    >>> inputwidget = factory('password', 'MYPASSWORD', '')
    >>> inputwidget()
    u'<input id="input-MYPASSWORD" name="MYPASSWORD" type="password" value="" />'

    >>> inputwidget = factory('hidden', 'MYHIDDEN', 'Test Hidden')
    >>> inputwidget()
    u'<input id="input-MYHIDDEN" name="MYHIDDEN" type="hidden" value="Test Hidden" />'
    
    >>> inputwidget = factory('radio', 'MYRADIO', 'Test Radio')    
    >>> inputwidget()
    u'<input id="input-MYRADIO" name="MYRADIO" type="radio" value="Test Radio" />'

    >>> inputwidget = factory('checkbox', 'MYCHECKBOX', 'Test Checkbox')    
    >>> inputwidget()
    u'<input id="input-MYCHECKBOX" name="MYCHECKBOX" type="checkbox" value="Test Checkbox" />'

    >>> inputwidget = factory('file', 'MYFILE', 'Test File')    
    >>> inputwidget()
    u'<input id="input-MYFILE" name="MYFILE" type="file" value="" />'
    
Required Input Widget
=====================    
::

    >>> inputwidget = factory('text', 'REQUIRED', '',
    ...                       {'required': True})
    >>> inputwidget()
    u'<input class="required" id="input-REQUIRED" name="REQUIRED" type="text" 
    value="" />'

    >> interact(locals())
    >>> data = inputwidget.extract({})
    >>> data
    {'errors': [ExtractionError('Mandatory field was empty',)], 
    'extracted': [<UNSET>], 'input_field_type': 'text', 'rendered': [], 
    'request': {}, 'value': ''}
    
    >>> data = inputwidget.extract({'REQUIRED': ''})
    >>> data
    {'errors': [ExtractionError('Mandatory field was empty',)], 
    'extracted': [''], 'input_field_type': 'text', 'rendered': [], 
    'request': {'REQUIRED': ''}, 'value': ''}
    
    >>> inputwidget = factory('text', 'REQUIRED', 'Test Text',
    ...                       {'required': True})
    >>> data = inputwidget.extract({'REQUIRED': ''})
    >>> data
    {'errors': [ExtractionError('Mandatory field was empty',)], 
    'extracted': [''], 'input_field_type': 'text', 'rendered': [], 
    'request': {'REQUIRED': ''}, 'value': 'Test Text'}
    
    >>> inputwidget(data=data)
    u'<input class="error required" id="input-REQUIRED" name="REQUIRED" type="text" 
    value="Test Text" />'

    >>> inputwidget = factory('text', 'REQUIRED', '',
    ...                       {'required': 'You fool, fill in a value!'})
    >>> data = inputwidget.extract({})
    >>> data
    {'errors': [ExtractionError('You fool, fill in a value!',)], 
    'extracted': [<UNSET>], 'input_field_type': 'text', 'rendered': [], 
    'request': {}, 'value': ''}
    
    
    
Textarea Widget
===============
::

    >>> inputwidget = factory('textarea', 'MYTEXTAREA', 'Test Textarea',
    ...                       dict(label='Test Textarea Widget',
    ...                            css={'input': 'inputcss', 
    ...                                 'label': 'labelcss'},
    ...                            id={'label': 'TestLabelId'}))
    >>> inputwidget()
    u'<textarea cols="80" id="input-MYTEXTAREA" name="MYTEXTAREA" rows="25">Test Textarea</textarea>'

Selection Widget
================
::

    >>> selectwidget = factory('select', 'MYSELECT', ['one', 'three'],
    ...                       {'vocabulary': [('one','One'), 
    ...                                       ('two', 'Two'), 
    ...                                       ('three', 'Three'),
    ...                                       ('four', 'Four')],
    ...                       'label': 'Test Selection Widget',
    ...                       'css': {'selection': 'selectioncss', 
    ...                               'label': 'labelcss'}})
    >>> selectwidget()
    u'<select id="input-MYSELECT" name="MYSELECT"><option id="input-MYSELECT-one" selected="selected" value="one">One</option><option id="input-MYSELECT-two" value="two">Two</option><option id="input-MYSELECT-three" selected="selected" value="three">Three</option><option id="input-MYSELECT-four" value="four">Four</option></select>'

    >>> data = selectwidget.extract({'MYSELECT': 'two'})
    >>> selectwidget(data=data)
    u'<select id="input-MYSELECT" name="MYSELECT"><option id="input-MYSELECT-one" 
    value="one">One</option><option id="input-MYSELECT-two" selected="selected" 
    value="two">Two</option><option id="input-MYSELECT-three" 
    value="three">Three</option><option id="input-MYSELECT-four" 
    value="four">Four</option></select>'
    
File Widget
===========
    
    
Submit Widget (action)
======================
::

    >>> props = {
    ...     'action': True,
    ...     'label': 'Action name',
    ... }
    >>> widget = factory('submit', name='save', props=props)
    >>> widget()
    u'<input class="" id="input-save" name="action.save" type="submit" value="Action name" />'
    
Label Widget
============

Default
::
    >>> from yafowil.base import Widget, RuntimeData
    >>> from yafowil.common import label_renderer
    >>> props = {'label': 'LABEL'}
    >>> data = RuntimeData()
    >>> data['rendered'].append(u'<RUBBISH>')
    >>> data['rendered'].append(u'<INNER-WIDGET>')
    >>> widget = Widget([], [], [], 'MYUID', '', props)
    >>> label_renderer(widget, data)
    u'<label for="input-MYUID" id="label-MYUID">LABEL</label><INNER-WIDGET>'

Label after widget
::

    >>> widget.attrs['labelpos'] = 'after'
    >>> label_renderer(widget, data)
    u'<INNER-WIDGET><label for="input-MYUID" id="label-MYUID">LABEL</label>'
    
Same with inner label
::

    >>> widget.attrs['labelpos'] = 'inner'
    >>> label_renderer(widget, data)
    u'<label for="input-MYUID" id="label-MYUID">LABEL<INNER-WIDGET></label>'


Field Widget
============
    
Chained file inside field with label
::

    >>> widget = factory('field:label:file', name='MYFILE', \
    ...                   props={'label': 'MY FILE'})
    >>> widget()
    u'<div id="field-MYFILE"><label for="input-MYFILE" 
    id="label-MYFILE">MY FILE</label><input id="input-MYFILE" name="MYFILE" 
    type="file" value="" /></div>'

Error Widget
============

Chained password inside error inside field
::

    >>> widget = factory('field:error:password', name='password',
    ...                  props={'label': 'Password',
    ...                         'required': 'No password given!'})
    
    >>> widget({'password': ''})
    u'<div id="field-password"><div class="error"><div class="errormessage">No 
    password given!</div><input class="error required" id="input-password" 
    name="password" type="password" value="" /></div></div>'
    
    >>> widget({'password': 'secret'})
    u'<div id="field-password"><input class="required" id="input-password" 
    name="password" type="password" value="secret" /></div>'
    