Yafowil Base Components
=======================

UNSET
-----
::

    >>> from yafowil.base import UNSET
    >>> UNSET
    <UNSET>
    
    >>> str(UNSET)
    ''

    >>> bool(UNSET)
    False


Runtime Data
------------

Initial RuntimeData is empty
::    

    >>> from yafowil.base import RuntimeData
    >>> data = RuntimeData()
    >>> data.request
    <UNSET>
    
    >>> data.value
    <UNSET>

    >>> data.extracted
    <UNSET>
    
    >>> data.rendered
    <UNSET>

    >>> data.errors
    []
    
    >>> data.keys()
    []
    
    >>> repr(data.__name__)
    'None'
    
Initial RuntimeData can get its name passed in.
::

    >>> data = RuntimeData('root')
    >>> data.__name__
    'root'    

RuntimeData can have children.
::   
    
    >>> data['surname'] = RuntimeData()
    >>> data['fieldset'] = RuntimeData()
    >>> data.keys()
    ['surname', 'fieldset']
    
    >>> data['surname'].__name__
    'surname'
    
And each child can have children again.
::
    
    >>> data['fieldset']['age'] = RuntimeData()
    >>> data['fieldset']['age'].value = 36
    
RuntimeData can have arbitrary attributes.
::

    >>> data['surname'].attrs['somekey'] = 'somevalue'
    >>> data['surname'].attrs['somekey']
    'somevalue'
    
You can fetch other data also by its dotted absolute path.
::
    
    >>> fetched = data.fetch('root.fieldset.age')
    >>> fetched.value 
    36

Or by the absolute path as an list of strings.
::    

    >>> fetched = data.fetch(['root', 'fieldset', 'age'])
    >>> fetched.value 
    36
    
It works on children. 
::

    >>> fetched = data['fieldset']['age'].fetch('root.surname')
    >>> fetched.__name__
    'surname'

Same with path as a list.
::

    >>> fetched = data['fieldset']['age'].fetch(['root', 'surname'])
    >>> fetched.__name__
    'surname'


Base Widget
-----------
::

    >>> from yafowil.base import Widget
    >>> from yafowil.base import ExtractionError 
    
Create some test dummies.
::

    >>> def test_extractor(widget, data):
    ...     return 'e1'

    >>> def test_extractor2(widget, data):
    ...     return 'e2'

    >>> def test_extractor3(widget, data):
    ...     number = data.request[widget.__name__]
    ...     try:
    ...         return int(number)
    ...     except:
    ...         raise ExtractionError('e3: Integer expected, got %s' % number)
    ...     return value
    
    >>> def test_renderer(widget, data):
    ...     #interact(locals())
    ...     return 'r1', widget.__name__, str(data), str(widget.attributes)

    >>> def test_renderer2(widget, data):
    ...     return 'r2', widget.__name__, str(data), str(widget.attributes)
    
    >>> def test_preprocessor(widget, data):
    ...     data.attrs['test_preprocessor'] = 'called'
    ...     return data
    
    >>> def test_getter(widget, data):
    ...     return 'Test Value'

    >>> def test_getter2(widget, data):
    ...     return 999

The widget class.
::    
    
    >>> test_request = {'MYUID': 'New Test Value'}
    >>> testwidget = Widget([('1', test_extractor)], 
    ...                     [('1', test_renderer)], 
    ...                     [('1', test_preprocessor)],
    ...                     'MYUID', test_getter,
    ...                     dict(test1='Test1', test2='Test2'))
        
    >>> testwidget() 
    ('r1', 'MYUID', "<RuntimeData MYUID, value='Test Value', extracted=<UNSET>, 
    attrs={'test_preprocessor': 'called'} at ...>", "{'test1': 'Test1', 
    'test2': 'Test2'}")
    
A passed in request does not triger extraction.
::    
    
    >>> testwidget(request=test_request) 
    ('r1', 'MYUID', "<RuntimeData MYUID, value='Test Value', extracted=<UNSET>, 
    attrs={'test_preprocessor': 'called'} at ...>", "{'test1': 'Test1', 
    'test2': 'Test2'}")
    
Extraction is an explicit task.
::    
    
    >>> data = testwidget.extract(test_request)
    >>> data
    <RuntimeData MYUID, value='Test Value', extracted='e1', 
    attrs={'test_preprocessor': 'called'} at ...>
    
Different cases.
::    
    
    >>> testwidget = Widget([('1', test_extractor)], 
    ...                     [('1', test_renderer)], 
    ...                     [],
    ...                     'MYUID', test_getter,
    ...                     dict(test1='Test1', test2='Test2'))    
    >>> testwidget()
    ('r1', 'MYUID', "<RuntimeData MYUID, value='Test Value', extracted=<UNSET> 
    at ...>", "{'test1': 'Test1', 'test2': 'Test2'}")
        
    >>> testwidget = Widget([('1', test_extractor), ('2', test_extractor2)], 
    ...                     [('1', test_renderer), ('2', test_renderer2)], 
    ...                     [],
    ...                     'MYUID2', test_getter,
    ...                     dict(test1='Test1', test2='Test2'))
    >>> testwidget()
    ('r2', 'MYUID2', "<RuntimeData MYUID2, value='Test Value', 
    extracted=<UNSET> at ...>", "{'test1': 'Test1', 'test2': 'Test2'}")
    
    >>> testwidget = Widget([('1', test_extractor3)], 
    ...                     [('1', test_renderer)], 
    ...                     [],
    ...                     'MYUID2', test_getter2,
    ...                     dict(test1='Test1', test2='Test2'))

    >>> testwidget.extract({'MYUID2': 'ABC'})
    <RuntimeData MYUID2, value=999, extracted=<UNSET>, 1 error(s) at ...>    
    >>> testwidget = Widget([('1', test_extractor3)], 
    ...                     [('1', test_renderer)], 
    ...                     [],
    ...                     'MYUID2', test_getter2,
    ...                     dict(test1='Test1', test2='Test2'))

    >>> testwidget.extract({'MYUID2': '123'})
    <RuntimeData MYUID2, value=999, extracted=123 at ...>
    
        
factory
-------
::

    >>> from yafowil.base import Factory
    >>> factory = Factory()
    >>> factory.register('widget_test', [test_extractor], [test_renderer])
    >>> factory.extractors('widget_test')
    [<function test_extractor at ...>]
    
    >>> factory.renderers('widget_test')
    [<function test_renderer at ...>]
    
    >>> testwidget = factory('widget_test', name='MYFAC', value=test_getter, 
    ...                      props=dict(foo='bar'))
    >>> testwidget()
    ('r1', 'MYFAC', "<RuntimeData MYFAC, value='Test Value', extracted=<UNSET> 
    at ...>", "{'foo': 'bar'}")
    
We can create sets of static subwidgets, i.e. to have a validating password
field with two input fields in. Here a simpler example.
:: 

    >>> def create_static_compound(widget, factory):
    ...     widget['one'] = factory('widget_test', widget.attrs)
    ...     widget['two'] = factory('widget_test', widget.attrs)
        
    >>> factory.register('static_compound', [], [], 
    ...                  subwidgets=[create_static_compound])
    
    >>> widget = factory('static_compound', props={})
    >>> widget.keys()
    ['one', 'two']


Request chains via factory
--------------------------

Sometimes we want to wrap inputs by UI candy, primary for usability reasons. 
This might be a label, some error output or div around. We dont want to register
an amount of X possible widgets with an amount of Y possible wrappers. Therefore
we can factor a widget in a chain defined colon-separated, i.e 'outer:inner' or 
'field:error:text'. Chaining works for all parts: renderers, extractors, 
preprocessors and subwidgets. Most inner and first executed is right (we prefix 
with wrappers)!
::

    >>> def inner_renderer(widget, data):
    ...     return u'<INNER />'

    >>> def inner_extractor(widget, data):
    ...     return ['extracted inner']

    >>> def outer_renderer(widget, data):
    ...     return u'<OUTER>%s</OUTER>' % data.rendered
    
    >>> def outer_extractor(widget, data):
    ...     return data.extracted + ['extracted outer']
        
    >>> factory.register('inner', [inner_extractor], [inner_renderer])
    >>> factory.register('outer', [outer_extractor], [outer_renderer])
    >>> widget = factory('outer:inner')
    >>> data = widget.extract({})
    >>> data.extracted
    ['extracted inner', 'extracted outer']
    
    >>> widget(data)
    u'<OUTER><INNER /></OUTER>'
    

Inject custom specials parts in the chain
-----------------------------------------

You may need an behavior just one time and just for one special widget. Here
you can inject your custom special render or extractor into the chain.
::
    
    >>> def special_renderer(widget, data):
    ...     return u'<SPECIAL>%s</SPECIAL>' % data.rendered

    >>> def special_extractor(widget, data):
    ...     return data.extracted + ['extracted special']
        
    >>> widget = factory('outer:*special:inner', 
    ...                  custom={'special': ([special_extractor], 
    ...                                      [special_renderer], 
    ...                                      [], [])})
    >>> data = widget.extract({})
    >>> data.extracted
    ['extracted inner', 'extracted special', 'extracted outer']

    >>> widget(data)
    u'<OUTER><SPECIAL><INNER /></SPECIAL></OUTER>'


Prefixes with widgets and factories
-----------------------------------
 
Factory called widget attributes should now about its factory name with a 
prefix.
:: 

    >>> def prefix_renderer(widget, data):
    ...     return u'<ID>%s</ID>' % widget.attrs['id']
    
    >>> factory.register('prefix', [], [prefix_renderer])
    >>> widget = factory('prefix', props={'prefix.id': 'Test'})
    >>> widget()
    u'<ID>Test</ID>'

    >>> widget = factory('prefix', props={'id': 'Test2'})
    >>> widget()
    u'<ID>Test2</ID>'
    
    
modify defaults for widgets attributes via factory
--------------------------------------------------

1st look for prefixed in attributes.
::

    >>> factory.defaults['id'] = 'Test3'
    >>> widget = factory('prefix')
    >>> widget()
    u'<ID>Test3</ID>'

2nd look for unprefixed in attributes.
::

    >>> factory.defaults['prefix.id'] = 'Test4'
    >>> widget = factory('prefix')
    >>> widget()
    u'<ID>Test4</ID>'

3rd look for prefixed in defaults.
::

    >>> widget = factory('prefix', props={'prefix.id': 'Test'})
    >>> widget()
    u'<ID>Test</ID>'

4th look for unprefixed in defaults.
::

    >>> widget = factory('prefix', props={'id': 'Test2'})
    >>> widget()
    u'<ID>Test2</ID>'

5th raise keyerror.
::

    >>> del factory.defaults['id']
    >>> del factory.defaults['prefix.id']
    >>> widget = factory('prefix')
    >>> try:
    ...     widget()
    ... except KeyError, e:
    ...     print list(e)
    ['id', '<function prefix_renderer at ...>', None]